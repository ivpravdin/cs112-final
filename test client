#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

#define BUFFER_SIZE 8192

void init_openssl() {
    SSL_library_init();
    SSL_load_error_strings();
    OpenSSL_add_ssl_algorithms();
}

int connect_to_proxy(const char *proxy_host, int proxy_port) {
    int sockfd;
    struct sockaddr_in proxy_addr;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error creating socket");
        return -1;
    }

    memset(&proxy_addr, 0, sizeof(proxy_addr));
    proxy_addr.sin_family = AF_INET;
    proxy_addr.sin_port = htons(proxy_port);
    proxy_addr.sin_addr.s_addr = inet_addr(proxy_host);

    if (connect(sockfd, (struct sockaddr*)&proxy_addr, sizeof(proxy_addr)) < 0) {
        perror("Error connecting to proxy");
        close(sockfd);
        return -1;
    }

    return sockfd;
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <target_host>\n", argv[0]);
        return 1;
    }

    const char *target_host = argv[1];
    int target_port = 443;
    
    printf("Connecting to proxy...\n");
    // Connect to the proxy server
    int sockfd = connect_to_proxy("127.0.0.1", 8888);
    if (sockfd < 0) {
        return 1;
    }
    printf("Connected to proxy\n");

    // Send CONNECT request
    char connect_req[256];
    sprintf(connect_req, "CONNECT %s:%d HTTP/1.1\r\nHost: %s:%d\r\n\r\n", 
            target_host, target_port, target_host, target_port);
    
    printf("Sending CONNECT request...\n");
    if (write(sockfd, connect_req, strlen(connect_req)) < 0) {
        perror("Error sending CONNECT request");
        close(sockfd);
        return 1;
    }
    printf("CONNECT request sent\n");

    // Read proxy response
    char buffer[BUFFER_SIZE];
    printf("Waiting for proxy response...\n");
    int bytes = read(sockfd, buffer, sizeof(buffer));
    if (bytes < 0) {
        perror("Error reading proxy response");
        close(sockfd);
        return 1;
    }
    buffer[bytes] = '\0';
    printf("Proxy response:\n%s\n", buffer);

    // Initialize SSL
    printf("Initializing SSL...\n");
    init_openssl();
    SSL_CTX *ctx = SSL_CTX_new(TLS_client_method());
    if (!ctx) {
        perror("Error creating SSL context");
        close(sockfd);
        return 1;
    }
    printf("SSL context created\n");

    SSL *ssl = SSL_new(ctx);
    SSL_set_fd(ssl, sockfd);

    // Establish SSL connection
    printf("Establishing SSL connection...\n");
    if (SSL_connect(ssl) <= 0) {
        ERR_print_errors_fp(stderr);
        SSL_free(ssl);
        SSL_CTX_free(ctx);
        close(sockfd);
        return 1;
    }
    printf("SSL connection established\n");

    // Send HTTP GET request
    printf("Sending HTTP request...\n");
    char http_req[1024];
    sprintf(http_req, 
            "GET / HTTP/1.1\r\n"
            "Host: %s\r\n"
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/96.0.4664.45\r\n"
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
            "Accept-Language: en-US,en;q=0.5\r\n"
            "Accept-Encoding: identity\r\n"
            "Connection: close\r\n"
            "\r\n", 
            target_host);

    SSL_write(ssl, http_req, strlen(http_req));
    printf("HTTP request sent\n");

    // Read server response
    printf("Waiting for server response...\n");
    while ((bytes = SSL_read(ssl, buffer, sizeof(buffer) - 1)) > 0) {
        buffer[bytes] = '\0';
        printf("Received from server:\n%s", buffer);
    }
    printf("Server response complete\n");

    // Cleanup
    printf("Cleaning up...\n");
    SSL_shutdown(ssl);
    SSL_free(ssl);
    SSL_CTX_free(ctx);
    close(sockfd);
    EVP_cleanup();
    printf("Done\n");

    return 0;
}
